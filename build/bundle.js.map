{"version":3,"sources":["webpack:///webpack/bootstrap c94fa539f95688daa5f2","webpack:///./js/Neural/Network.js","webpack:///./js/index.js","webpack:///./js/FlappyBird/Game.js","webpack:///./js/FlappyBird/Bird.js","webpack:///./js/FlappyBird/Pipe.js","webpack:///./js/Neural/Neuroevolution.js","webpack:///./js/Neural/Generations.js","webpack:///./js/Neural/Generation.js","webpack:///./js/Neural/Layer.js","webpack:///./js/Neural/Neuron.js","webpack:///./js/Neural/Genome.js"],"names":["defaultOptions","activation","a","ap","Math","exp","randomClamped","random","network","population","elitism","randomBehaviour","mutationRate","mutationRange","historic","lowHistoric","scoreSort","nbChild","Network","perceptronGeneration","input","hiddens","output","index","previousNeurons","inputLayer","populate","layers","push","i","hiddenLayer","outputLayer","getSave","datas","neurons","weights","length","j","k","setSave","save","indexWeights","layer","compute","inputs","value","prevLayer","sum","options","out","lastLayer","loadImages","sources","callback","nb","loaded","imgs","Image","src","onload","window","sprites","bird","background","pipetop","pipebottom","start","game","update","display","timeouts","messageName","setZeroTimeout","fn","postMessage","handleMessage","event","source","data","stopPropagation","shift","addEventListener","FPS","speed","fps","parseInt","Neuvol","Game","images","interval","score","pipes","birds","gen","nextGeneration","console","log","b","generation","alives","backgroundx","backgroundSpeed","nextHoll","x","width","height","alive","y","res","flap","isDead","networkScore","isItEnd","isOut","splice","deltaBord","pipeHoll","hollPosition","round","spawnInterval","maxScore","setTimeout","ctx","clearRect","ceil","drawImage","floor","fillStyle","strokeStyle","translate","rotate","PI","gravity","restore","font","fillText","requestAnimationFrame","canvas","document","querySelector","getContext","Bird","json","velocity","jump","init","Pipe","Neuroevolution","restart","generations","networks","firstGeneration","nns","nn","genomes","addGenome","Generations","generateNextGeneration","genome","Generation","breed","g1","g2","nbChilds","JSON","parse","stringify","nexts","n","max","childs","c","Layer","nbNeurons","nbInputs","id","Neuron","Genome"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c94fa539f95688daa5f2","import { Layer } from './Layer';\n\nconst defaultOptions = {\n  /**\n      * Logistic activation function.\n      *\n  * @param {a} Input value.\n  * @return Logistic function output.\n  */\n  activation(a) {\n    const ap = (-a) / 1;\n    return (1 / (1 + Math.exp(ap)));\n  },\n\n  /**\n   * Returns a random value between -1 and 1.\n   *\n   * @return Random value.\n   */\n  randomClamped() {\n    return Math.random() * 2 - 1;\n  },\n\n  // various factors and parameters (along with default values).\n  network: [2, [2], 1],    // Perceptron network structure (1 hidden\n  // layer).\n  population: 50,          // Population by generation.\n  elitism: 0.2,            // Best networks kepts unchanged for the next\n  // generation (rate).\n  randomBehaviour: 0.2,    // New random networks for the next generation\n  // (rate).\n  mutationRate: 0.1,       // Mutation rate on the weights of synapses.\n  mutationRange: 0.5,      // Interval of the mutation changes on the\n  // synapse weight.\n  historic: 0,             // Latest generations saved.\n  lowHistoric: false,      // Only save score (not the network).\n  scoreSort: -1,           // Sort order (-1 = desc, 1 = asc).\n  nbChild: 1,               // Number of children by breeding.\n};\n\n\nclass Network {\n  /**\n   * Neural Network class\n   *\n   * Composed of Neuron Layers.\n   *\n   * @constructor\n   */\n  constructor() {\n    this.layers = [];\n    this.options = defaultOptions;\n  }\n\n  /**\n   * Generate the Network layers.\n   *\n   * @param {input} Number of Neurons in Input layer.\n   * @param {hidden} Number of Neurons per Hidden layer.\n   * @param {output} Number of Neurons in Output layer.\n   * @return void\n   */\n  perceptronGeneration = (input, hiddens, output) => {\n    let index = 0;\n    let previousNeurons = 0;\n    const inputLayer = new Layer(index);\n    inputLayer.populate(input, previousNeurons); // Number of Inputs will be set to\n    // 0 since it is an input layer.\n    previousNeurons = input;  // number of input is size of previous layer.\n    this.layers.push(inputLayer);\n    index++;\n    for (const i in hiddens) {\n      // Repeat same process as first layer for each hidden layer.\n      const hiddenLayer = new Layer(index);\n      hiddenLayer.populate(hiddens[i], previousNeurons);\n      previousNeurons = hiddens[i];\n      this.layers.push(hiddenLayer);\n      index++;\n    }\n    const outputLayer = new Layer(index);\n    outputLayer.populate(output, previousNeurons);  // Number of input is equal to\n    // the size of the last hidden\n    // layer.\n    this.layers.push(outputLayer);\n  }\n\n  /**\n   * Create a copy of the Network (neurons and weights).\n   *\n   * Returns number of neurons per layer and a flat array of all weights.\n   *\n   * @return Network data.\n   */\n  getSave = () => {\n    const datas = {\n      neurons: [], // Number of Neurons per layer.\n      weights: [], // Weights of each Neuron's inputs.\n    };\n\n    for (const i in this.layers) {\n      datas.neurons.push(this.layers[i].neurons.length);\n      for (const j in this.layers[i].neurons) {\n        for (const k in this.layers[i].neurons[j].weights) {\n          // push all input weights of each Neuron of each Layer into a flat\n          // array.\n          datas.weights.push(this.layers[i].neurons[j].weights[k]);\n        }\n      }\n    }\n    return datas;\n  }\n\n  /**\n   * Apply network data (neurons and weights).\n   *\n   * @param {save} Copy of network data (neurons and weights).\n   * @return void\n   */\n  setSave = (save) => {\n    let previousNeurons = 0;\n    let index = 0;\n    let indexWeights = 0;\n    this.layers = [];\n    for (const i in save.neurons) {\n      // Create and populate layers.\n      const layer = new Layer(index);\n      layer.populate(save.neurons[i], previousNeurons);\n      for (const j in layer.neurons) {\n        for (const k in layer.neurons[j].weights) {\n          // Apply neurons weights to each Neuron.\n          layer.neurons[j].weights[k] = save.weights[indexWeights];\n\n          indexWeights++; // Increment index of flat array.\n        }\n      }\n      previousNeurons = save.neurons[i];\n      index++;\n      this.layers.push(layer);\n    }\n  }\n\n  /**\n   * Compute the output of an input.\n   *\n   * @param {inputs} Set of inputs.\n   * @return Network output.\n   */\n  compute = (inputs) => {\n    // Set the value of each Neuron in the input layer.\n    for (const i in inputs) {\n      if (this.layers[0] && this.layers[0].neurons[i]) {\n        this.layers[0].neurons[i].value = inputs[i];\n      }\n    }\n\n    let prevLayer = this.layers[0]; // Previous layer is input layer.\n    for (let i = 1; i < this.layers.length; i++) {\n      for (const j in this.layers[i].neurons) {\n        // For each Neuron in each layer.\n        let sum = 0;\n        for (const k in prevLayer.neurons) {\n          // Every Neuron in the previous layer is an input to each Neuron in\n          // the next layer.\n          sum += prevLayer.neurons[k].value\n            * this.layers[i].neurons[j].weights[k];\n        }\n\n        // Compute the activation of the Neuron.\n        this.layers[i].neurons[j].value = this.options.activation(sum);\n      }\n      prevLayer = this.layers[i];\n    }\n\n    // All outputs of the Network.\n    const out = [];\n    const lastLayer = this.layers[this.layers.length - 1];\n    for (const i in lastLayer.neurons) {\n      out.push(lastLayer.neurons[i].value);\n    }\n    return out;\n  }\n\n}\n\nexport { Network };\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Network.js","import { Game } from './FlappyBird/Game';\n\nconst loadImages = (sources, callback) => {\n  let nb = 0;\n  let loaded = 0;\n  const imgs = {};\n  for (const i in sources) {\n    nb++;\n    imgs[i] = new Image();\n    imgs[i].src = sources[i];\n    imgs[i].onload = () => { // eslint-disable-line\n      loaded++;\n      if (loaded === nb) {\n        callback(imgs);\n      }\n    };\n  }\n};\n\nwindow.onload = () => {\n  const sprites = {\n    bird: './img/bird.png',\n    background: './img/background.png',\n    pipetop: './img/pipetop.png',\n    pipebottom: './img/pipebottom.png',\n  };\n\n  const start = (imgs) => {\n    const game = new Game(imgs);\n    game.start();\n    game.update();\n    game.display();\n  };\n\n\n  loadImages(sprites, imgs => start(imgs));\n};\n\n\nconst timeouts = [];\nconst messageName = 'zero-timeout-message';\n\nfunction setZeroTimeout(fn) {\n  timeouts.push(fn);\n  window.postMessage(messageName, '*');\n}\n\nfunction handleMessage(event) {\n  if (event.source === window && event.data === messageName) {\n    event.stopPropagation();\n    if (timeouts.length > 0) {\n      const fn = timeouts.shift();\n      fn();\n    }\n  }\n}\n\nwindow.addEventListener('message', handleMessage, true);\n\nwindow.setZeroTimeout = setZeroTimeout;\n\nwindow.FPS = 60;\nwindow.speed = (fps) => {\n  window.FPS = parseInt(fps, 10);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./js/index.js","import { Bird } from './Bird';\nimport { Pipe } from './Pipe';\nimport { Neuroevolution } from '../Neural/Neuroevolution';\n\nconst Neuvol = new Neuroevolution({\n  population: 50,\n  network: [2, [2], 1],\n});\n\nclass Game {\n  constructor(images) {\n    this.pipes = [];\n    this.birds = [];\n    this.score = 0;\n    this.canvas = document.querySelector('#flappy');\n    this.ctx = this.canvas.getContext('2d');\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    this.spawnInterval = 90;\n    this.interval = 0;\n    this.gen = [];\n    this.alives = 0;\n    this.generation = 0;\n    this.backgroundSpeed = 0.5;\n    this.backgroundx = 0;\n    this.maxScore = 0;\n\n    this.images = images;\n  }\n\n  start = () => {\n    this.interval = 0;\n    this.score = 0;\n    this.pipes = [];\n    this.birds = [];\n\n    this.gen = Neuvol.nextGeneration();\n    console.log(this.gen);\n    for (const i in this.gen) { // eslint-disable-line\n      const b = new Bird();\n      this.birds.push(b);\n    }\n    this.generation++;\n    this.alives = this.birds.length;\n  }\n\n  update = () => {\n    this.backgroundx += this.backgroundSpeed;\n    let nextHoll = 0;\n    if (this.birds.length > 0) {\n      for (let i = 0; i < this.pipes.length; i += 2) {\n        if (this.pipes[i].x + this.pipes[i].width > this.birds[0].x) {\n          nextHoll = this.pipes[i].height / this.height;\n          break;\n        }\n      }\n    }\n\n    for (const i in this.birds) {\n      if (this.birds[i].alive) {\n        const inputs = [\n          this.birds[i].y / this.height,\n          nextHoll,\n        ];\n\n        const res = this.gen[i].compute(inputs);\n        if (res > 0.5) {\n          this.birds[i].flap();\n        }\n\n        this.birds[i].update();\n        if (this.birds[i].isDead(this.height, this.pipes)) {\n          this.birds[i].alive = false;\n          this.alives--;\n          // console.log(this.alives);\n          Neuvol.networkScore(this.gen[i], this.score);\n          if (this.isItEnd()) {\n            this.start();\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < this.pipes.length; i++) {\n      this.pipes[i].update();\n      if (this.pipes[i].isOut()) {\n        this.pipes.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (this.interval === 0) {\n      const deltaBord = 50;\n      const pipeHoll = 120;\n      const hollPosition = Math.round(Math.random() * (this.height - deltaBord * 2 - pipeHoll)) + deltaBord;\n      this.pipes.push(new Pipe({ x: this.width, y: 0, height: hollPosition }));\n      this.pipes.push(new Pipe({ x: this.width, y: hollPosition + pipeHoll, height: this.height }));\n    }\n\n    this.interval++;\n    if (this.interval === this.spawnInterval) {\n      this.interval = 0;\n    }\n\n    this.score++;\n    this.maxScore = (this.score > this.maxScore) ? this.score : this.maxScore;\n\n    if (window.FPS === 0) {\n      window.setZeroTimeout(() => {\n        this.update();\n      });\n    } else {\n      setTimeout(() => {\n        this.update();\n      }, 1000 / window.FPS);\n    }\n  }\n\n\n  isItEnd = () => {\n    for (const i in this.birds) {\n      if (this.birds[i].alive) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  display = () => {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    for (let i = 0; i < Math.ceil(this.width / this.images.background.width) + 1; i++) {\n      this.ctx.drawImage(this.images.background, i * this.images.background.width - Math.floor(this.backgroundx % this.images.background.width), 0);\n    }\n\n    for (const i in this.pipes) {\n      if (i % 2 === 0) {\n        this.ctx.drawImage(this.images.pipetop, this.pipes[i].x, this.pipes[i].y + this.pipes[i].height - this.images.pipetop.height, this.pipes[i].width, this.images.pipetop.height);\n      } else {\n        this.ctx.drawImage(this.images.pipebottom, this.pipes[i].x, this.pipes[i].y, this.pipes[i].width, this.images.pipetop.height);\n      }\n    }\n\n    this.ctx.fillStyle = '#FFC600';\n    this.ctx.strokeStyle = '#CE9E00';\n    for (const i in this.birds) {\n      if (this.birds[i].alive) {\n        this.ctx.save();\n        this.ctx.translate(this.birds[i].x + this.birds[i].width / 2, this.birds[i].y + this.birds[i].height / 2);\n        this.ctx.rotate(Math.PI / 2 * this.birds[i].gravity / 20);\n        this.ctx.drawImage(this.images.bird, -this.birds[i].width / 2, -this.birds[i].height / 2, this.birds[i].width, this.birds[i].height);\n        this.ctx.restore();\n      }\n    }\n\n    this.ctx.fillStyle = 'white';\n    this.ctx.font = '20px Oswald, sans-serif';\n    this.ctx.fillText(`Score : ${this.score}`, 10, 25);\n    this.ctx.fillText(`Max Score : ${this.maxScore}`, 10, 50);\n    this.ctx.fillText(`Generation : ${this.generation}`, 10, 75);\n    this.ctx.fillText(`Alive : ${this.alives} / ${Neuvol.options.population}`, 10, 100);\n\n    requestAnimationFrame(() => {\n      this.display();\n    });\n  }\n}\n\nexport { Game };\n\n\n\n// WEBPACK FOOTER //\n// ./js/FlappyBird/Game.js","class Bird {\n  constructor(json) {\n    this.x = 80;\n    this.y = 250;\n    this.width = 40;\n    this.height = 30;\n\n    this.alive = true;\n    this.gravity = 0;\n    this.velocity = 0.3;\n    this.jump = -6;\n\n    this.init(json);\n  }\n\n  init = (json) => {\n    for (const i in json) {\n      this[i] = json[i];\n    }\n  }\n\n  flap = () => {\n    this.gravity = this.jump;\n  }\n\n  update = () => {\n    this.gravity += this.velocity;\n    this.y += this.gravity;\n  }\n\n  isDead = (height, pipes) => {\n    if (this.y >= height || this.y + this.height <= 0) {\n      return true;\n    }\n    for (const i in pipes) {\n      if (!(\n        this.x > pipes[i].x + pipes[i].width ||\n        this.x + this.width < pipes[i].x ||\n        this.y > pipes[i].y + pipes[i].height ||\n        this.y + this.height < pipes[i].y\n      )) {\n        return true;\n      }\n    }\n  }\n}\n\nexport { Bird };\n\n\n\n// WEBPACK FOOTER //\n// ./js/FlappyBird/Bird.js","class Pipe {\n  constructor(json) {\n    this.x = 0;\n    this.y = 0;\n    this.width = 50;\n    this.height = 40;\n    this.speed = 3;\n\n    this.init(json);\n  }\n\n  init(json) {\n    for (const i in json) {\n      this[i] = json[i];\n    }\n  }\n\n  update() {\n    this.x -= this.speed;\n  }\n\n  isOut() {\n    if (this.x + this.width < 0) {\n      return true;\n    }\n  }\n}\n\nexport { Pipe };\n\n\n\n\n// WEBPACK FOOTER //\n// ./js/FlappyBird/Pipe.js","import { Generations } from './Generations';\nimport { Network } from './Network';\nimport { Genome } from './Genome';\n\n\nconst defaultOptions = {\n  /**\n      * Logistic activation function.\n      *\n  * @param {a} Input value.\n  * @return Logistic function output.\n  */\n  activation(a) {\n    const ap = (-a) / 1;\n    return (1 / (1 + Math.exp(ap)));\n  },\n\n  /**\n   * Returns a random value between -1 and 1.\n   *\n   * @return Random value.\n   */\n  randomClamped() {\n    return Math.random() * 2 - 1;\n  },\n\n  // various factors and parameters (along with default values).\n  network: [2, [2], 1],    // Perceptron network structure (1 hidden\n  // layer).\n  population: 50,          // Population by generation.\n  elitism: 0.2,            // Best networks kepts unchanged for the next\n  // generation (rate).\n  randomBehaviour: 0.2,    // New random networks for the next generation\n  // (rate).\n  mutationRate: 0.1,       // Mutation rate on the weights of synapses.\n  mutationRange: 0.5,      // Interval of the mutation changes on the\n  // synapse weight.\n  historic: 0,             // Latest generations saved.\n  lowHistoric: false,      // Only save score (not the network).\n  scoreSort: -1,           // Sort order (-1 = desc, 1 = asc).\n  nbChild: 1,               // Number of children by breeding.\n};\n\n/**\n * Provides a set of classes and methods for handling Neuroevolution and\n * genetic algorithms.\n *\n * @param {options} An object of options for Neuroevolution.\n */\nclass Neuroevolution {\n  constructor(options) {\n    // Declaration of module parameters (options) and default values\n    this.options = { ...defaultOptions, options };\n    this.generations = new Generations();\n  }\n\n  /**\n   * Reset and create a new Generations object.\n   *\n   * @return void.\n   */\n  restart = () => {\n    this.generations = new Generations();\n  }\n\n  /**\n   * Create the next generation.\n   *\n   * @return Neural Network array for next Generation.\n   */\n  nextGeneration = () => {\n    let networks = [];\n\n    if (this.generations.generations.length === 0) {\n      // If no Generations, create first.\n      networks = this.generations.firstGeneration();\n    } else {\n      // Otherwise, create next one.\n      networks = this.generations.nextGeneration();\n    }\n\n    // Create Networks from the current Generation.\n    const nns = [];\n    for (const i in networks) {\n      const nn = new Network();\n      nn.setSave(networks[i]);\n      nns.push(nn);\n    }\n\n    if (this.options.lowHistoric) {\n      // Remove old Networks.\n      if (this.generations.generations.length >= 2) {\n        const genomes =\n          this.generations\n            .generations[this.generations.generations.length - 2]\n            .genomes;\n        for (const i in genomes) {\n          delete genomes[i].network;\n        }\n      }\n    }\n\n    if (this.options.historic !== -1) {\n      // Remove older generations.\n      if (this.generations.generations.length > this.options.historic + 1) {\n        this.generations.generations.splice(0,\n          this.generations.generations.length - (this.options.historic + 1));\n      }\n    }\n\n    return nns;\n  }\n\n  /**\n   * Adds a new Genome with specified Neural Network and score.\n   *\n   * @param {network} Neural Network.\n   * @param {score} Score value.\n   * @return void.\n   */\n  networkScore = (network, score) => {\n    this.generations.addGenome(new Genome(score, network.getSave()));\n  }\n}\n\nexport { Neuroevolution };\n\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Neuroevolution.js","import { Generation } from './Generation';\nimport { Network } from './Network';\n\n\nconst defaultOptions = {\n  /**\n      * Logistic activation function.\n      *\n  * @param {a} Input value.\n  * @return Logistic function output.\n  */\n  activation(a) {\n    const ap = (-a) / 1;\n    return (1 / (1 + Math.exp(ap)));\n  },\n\n  /**\n   * Returns a random value between -1 and 1.\n   *\n   * @return Random value.\n   */\n  randomClamped() {\n    return Math.random() * 2 - 1;\n  },\n\n  // various factors and parameters (along with default values).\n  network: [2, [2], 1],    // Perceptron network structure (1 hidden\n  // layer).\n  population: 50,          // Population by generation.\n  elitism: 0.2,            // Best networks kepts unchanged for the next\n  // generation (rate).\n  randomBehaviour: 0.2,    // New random networks for the next generation\n  // (rate).\n  mutationRate: 0.1,       // Mutation rate on the weights of synapses.\n  mutationRange: 0.5,      // Interval of the mutation changes on the\n  // synapse weight.\n  historic: 0,             // Latest generations saved.\n  lowHistoric: false,      // Only save score (not the network).\n  scoreSort: -1,           // Sort order (-1 = desc, 1 = asc).\n  nbChild: 1,               // Number of children by breeding.\n};\n\nclass Generations {\n  /**\n   * Generations class.\n   *\n   * Hold's previous Generations and current Generation.\n   *\n   * @constructor\n   */\n  constructor() {\n    this.generations = [];\n    this.options = defaultOptions;\n    // var currentGeneration = new Generation();\n  }\n\n  /**\n   * Create the first generation.\n   *\n   * @param {input} Input layer.\n   * @param {input} Hidden layer(s).\n   * @param {output} Output layer.\n   * @return First Generation.\n   */\n  firstGeneration = () => {\n    const out = [];\n    for (let i = 0; i < this.options.population; i++) {\n      // Generate the Network and save it.\n      const nn = new Network();\n      nn.perceptronGeneration(this.options.network[0],\n        this.options.network[1],\n        this.options.network[2]);\n      out.push(nn.getSave());\n    }\n\n    this.generations.push(new Generation());\n    return out;\n  }\n\n  /**\n   * Create the next Generation.\n   *\n   * @return Next Generation.\n   */\n  nextGeneration = () => {\n    if (this.generations.length === 0) {\n      // Need to create first generation.\n      return false;\n    }\n\n    const gen = this.generations[this.generations.length - 1]\n      .generateNextGeneration();\n    this.generations.push(new Generation());\n    return gen;\n  }\n\n  /**\n   * Add a genome to the Generations.\n   *\n   * @param {genome}\n   * @return False if no Generations to add to.\n   */\n  addGenome = (genome) => {\n    // Can't add to a Generation if there are no Generations.\n    if (this.generations.length === 0) return false;\n\n    // FIXME addGenome returns void.\n    return this.generations[this.generations.length - 1].addGenome(genome);\n  }\n\n}\n\nexport { Generations };\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Generations.js","const defaultOptions = {\n  /**\n      * Logistic activation function.\n      *\n  * @param {a} Input value.\n  * @return Logistic function output.\n  */\n  activation(a) {\n    const ap = (-a) / 1;\n    return (1 / (1 + Math.exp(ap)));\n  },\n\n  /**\n   * Returns a random value between -1 and 1.\n   *\n   * @return Random value.\n   */\n  randomClamped() {\n    return Math.random() * 2 - 1;\n  },\n\n  // various factors and parameters (along with default values).\n  network: [2, [2], 1],    // Perceptron network structure (1 hidden\n  // layer).\n  population: 50,          // Population by generation.\n  elitism: 0.2,            // Best networks kepts unchanged for the next\n  // generation (rate).\n  randomBehaviour: 0.2,    // New random networks for the next generation\n  // (rate).\n  mutationRate: 0.1,       // Mutation rate on the weights of synapses.\n  mutationRange: 0.5,      // Interval of the mutation changes on the\n  // synapse weight.\n  historic: 0,             // Latest generations saved.\n  lowHistoric: false,      // Only save score (not the network).\n  scoreSort: -1,           // Sort order (-1 = desc, 1 = asc).\n  nbChild: 1,               // Number of children by breeding.\n};\n\nclass Generation {\n  /**\n   * Generation class.\n   *\n   * Composed of a set of Genomes.\n   *\n   * @constructor\n   */\n  constructor() {\n    this.genomes = [];\n    this.options = defaultOptions;\n  }\n\n  /**\n   * Add a genome to the generation.\n   *\n   * @param {genome} Genome to add.\n   * @return void.\n   */\n  addGenome = (genome) => {\n    // Locate position to insert Genome into.\n    // The gnomes should remain sorted.\n    let i;\n    for (i = 0; i < this.genomes.length; i++) {\n      // Sort in descending order.\n      if (this.options.scoreSort < 0) {\n        if (genome.score > this.genomes[i].score) {\n          break;\n        }\n        // Sort in ascending order.\n      } else if (genome.score < this.genomes[i].score) {\n        break;\n      }\n    }\n\n    // Insert genome into correct position.\n    this.genomes.splice(i, 0, genome);\n  }\n\n  /**\n   * Breed to genomes to produce offspring(s).\n   *\n   * @param {g1} Genome 1.\n   * @param {g2} Genome 2.\n   * @param {nbChilds} Number of offspring (children).\n   */\n  breed = (g1, g2, nbChilds) => {\n    const datas = [];\n    for (let nb = 0; nb < nbChilds; nb++) {\n      // Deep clone of genome 1.\n      const data = JSON.parse(JSON.stringify(g1));\n      for (const i in g2.network.weights) {\n        // Genetic crossover\n        // 0.5 is the crossover factor.\n        // FIXME Really should be a predefined constant.\n        if (Math.random() <= 0.5) {\n          data.network.weights[i] = g2.network.weights[i];\n        }\n      }\n\n      // Perform mutation on some weights.\n      for (const i in data.network.weights) {\n        if (Math.random() <= this.options.mutationRate) {\n          data.network.weights[i] += Math.random()\n            * this.options.mutationRange\n            * 2\n            - this.options.mutationRange;\n        }\n      }\n      datas.push(data);\n    }\n\n    return datas;\n  }\n\n  /**\n   * Generate the next generation.\n   *\n   * @return Next generation data array.\n   */\n  generateNextGeneration = () => {\n    const nexts = [];\n\n    for (let i = 0; i < Math.round(this.options.elitism\n      * this.options.population); i++) {\n      if (nexts.length < this.options.population) {\n        // Push a deep copy of ith Genome's Nethwork.\n        nexts.push(JSON.parse(JSON.stringify(this.genomes[i].network)));\n      }\n    }\n\n    for (let i = 0; i < Math.round(this.options.randomBehaviour\n      * this.options.population); i++) {\n      const n = JSON.parse(JSON.stringify(this.genomes[0].network));\n      for (const k in n.weights) {\n        n.weights[k] = this.options.randomClamped();\n      }\n      if (nexts.length < this.options.population) {\n        nexts.push(n);\n      }\n    }\n\n    let max = 0;\n    while (true) { // eslint-disable-line\n      for (let i = 0; i < max; i++) {\n        // Create the children and push them to the nexts array.\n        const childs = this.breed(this.genomes[i], this.genomes[max],\n          (this.options.nbChild > 0 ? this.options.nbChild : 1));\n        for (const c in childs) {\n          nexts.push(childs[c].network);\n          if (nexts.length >= this.options.population) {\n            // Return once number of children is equal to the\n            // population by generatino value.\n            return nexts;\n          }\n        }\n      }\n      max++;\n      if (max >= this.genomes.length - 1) {\n        max = 0;\n      }\n    }\n  }\n}\n\nexport { Generation };\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Generation.js","import { Neuron } from './Neuron';\n\nclass Layer {\n  /**\n   * Neural Network Layer class.\n   *\n   * @constructor\n   * @param {index} Index of this Layer in the Network.\n   */\n  constructor(index) {\n    this.id = index || 0;\n    this.neurons = [];\n  }\n\n  /**\n   * Populate the Layer with a set of randomly weighted Neurons.\n   *\n   * Each Neuron be initialied with nbInputs inputs with a random clamped\n   * value.\n   *\n   * @param {nbNeurons} Number of neurons.\n   * @param {nbInputs} Number of inputs.\n   * @return void\n   */\n  populate = (nbNeurons, nbInputs) => {\n    this.neurons = [];\n    for (let i = 0; i < nbNeurons; i++) {\n      const n = new Neuron();\n      n.populate(nbInputs);\n      this.neurons.push(n);\n    }\n  }\n}\n\nexport { Layer };\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Layer.js","const defaultOptions = {\n  /**\n      * Logistic activation function.\n      *\n  * @param {a} Input value.\n  * @return Logistic function output.\n  */\n  activation(a) {\n    const ap = (-a) / 1;\n    return (1 / (1 + Math.exp(ap)));\n  },\n\n  /**\n   * Returns a random value between -1 and 1.\n   *\n   * @return Random value.\n   */\n  randomClamped() {\n    return Math.random() * 2 - 1;\n  },\n\n  // various factors and parameters (along with default values).\n  network: [2, [2], 1],    // Perceptron network structure (1 hidden\n  // layer).\n  population: 50,          // Population by generation.\n  elitism: 0.2,            // Best networks kepts unchanged for the next\n  // generation (rate).\n  randomBehaviour: 0.2,    // New random networks for the next generation\n  // (rate).\n  mutationRate: 0.1,       // Mutation rate on the weights of synapses.\n  mutationRange: 0.5,      // Interval of the mutation changes on the\n  // synapse weight.\n  historic: 0,             // Latest generations saved.\n  lowHistoric: false,      // Only save score (not the network).\n  scoreSort: -1,           // Sort order (-1 = desc, 1 = asc).\n  nbChild: 1,               // Number of children by breeding.\n};\n\n\nclass Neuron {\n  /**\n   * Artificial Neuron class\n   *\n   * @constructor\n   */\n  constructor() {\n    this.value = 0;\n    this.weights = [];\n    this.options = defaultOptions;\n  }\n\n  /**\n   * Initialize number of neuron weights to random clamped values.\n   *\n   * @param {nb} Number of neuron weights (number of inputs).\n   * @return void\n   */\n  populate = (nb) => {\n    this.weights = [];\n    for (let i = 0; i < nb; i++) {\n      this.weights.push(this.options.randomClamped());\n    }\n  }\n}\n\n\nexport { Neuron };\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Neuron.js","class Genome {\n  /**\n   * Genome class.\n   *\n   * Composed of a score and a Neural Network.\n   *\n   * @constructor\n   *\n   * @param {score}\n   * @param {network}\n   */\n  constructor(score = 0, network = null) {\n    this.score = score;\n    this.network = network;\n  }\n}\n\nexport { Genome };\n\n\n\n\n// WEBPACK FOOTER //\n// ./js/Neural/Genome.js"],"sourceRoot":""}